/* Задание №1: 1. Напишите генератор паролей. Составьте три уровня сложности генерации паролей (вместе
с их длиной) и спрашивайте у пользователя, какой уровень сложности ему нужен. Проявите свою
изобретательность: надёжные пароли должны состоять из сочетания строчных букв, прописных
букв, цифр и символов. Пароли должны генерироваться случайным образом каждый раз, когда
пользователь запрашивает новый пароль. */

#include "password_generator.h" // Наш заголовок
#include <iostream>
#include <string>
#include <random>   // Для std::random_device, std::mt19937
#include <chrono>   // Для инициализации генератора текущим временем
#include <limits>   // Для numeric_limits (хотя здесь уже не нужен, но оставим на всякий случай)

// Используем пространство имен std в .cpp файлах
using namespace std;

/**
 * @brief Основная функция программы.
 * @param argc Количество аргументов командной строки (не используется).
 * @param argv Массив аргументов командной строки (не используется).
 * @return 0 в случае успешного выполнения, 1 в случае ошибки.
 *
 * Инициализирует генератор случайных чисел, запрашивает уровень сложности,
 * генерирует пароль и выводит его. Позволяет генерировать несколько паролей,
 * используя вспомогательную функцию AskToContinue из password_generator.cpp.
 */
int main(int argc, char* argv[]) { // Фигурные скобки на той же строке
	// Инициализация генератора псевдослучайных чисел
	// Зачем? Чтобы пароли были действительно случайными при каждом запуске.
	random_device rd;
	mt19937 random_engine(chrono::high_resolution_clock::now().time_since_epoch().count());
	setlocale(LC_ALL, "Russian");
	cout << "Генератор паролей" << endl;
	cout << "-----------------" << endl;

	bool continue_generating = true;
	while (continue_generating) { // Цикл для генерации нескольких паролей
		// Получаем выбор пользователя
		PasswordComplexity complexity = GetComplexityChoice(cin, cout, cerr);

		if (complexity != PasswordComplexity::INVALID) {
			// Генерируем пароль
			// Зачем? Это основная цель программы.
			string password = GeneratePassword(complexity, random_engine, cerr);

			// Выводим результат, если пароль сгенерирован успешно
			if (!password.empty()) {
				cout << "\nСгенерированный пароль: " << password << endl;
			}
			// Если пароль пустой, сообщение об ошибке уже было выведено
		}
		else {
			// Ошибка уже была выведена GetComplexityChoice или ValidateComplexityChoice
			cerr << "Не удалось определить уровень сложности." << endl;
		}

		cout << endl; // Пустая строка для разделения

		// Спрашиваем пользователя, хочет ли он продолжить, вызывая функцию из другого файла
		// Зачем? Чтобы пользователь мог сгенерировать несколько паролей за один запуск.
		if (!AskToContinue(cin, cout, cerr)) {
			continue_generating = false;
		}
		cout << endl; // Пустая строка для разделения перед следующим запросом
	}

	cout << "Работа генератора паролей завершена." << endl;
	return 0; // Успешное завершение
}